{{- range services}}{{range service .Name}}{{end}}{{end -}}
{{- range ls "services/routes"}}{{end -}}

{{- with $data := plugin "/usr/local/bin/serve-tools" "consul" "nginx-template-context" (env "SERVE_ROUTE_FILTERS")  | parseJSON}}

{{range $upstream, $addresses := $data.upstreams}}
upstream {{$upstream}} {
  {{- range $addr := $addresses}}
    server {{$addr.address}}:{{$addr.port}} max_fails=3 fail_timeout=10s;
  {{- end}}
}
{{end}}


proxy_cache_path /cache/nginx/upstream levels=2:2 keys_zone=upstream_cache:128m inactive=3d max_size=4G;
proxy_temp_path /cache/nginx/cache-tmp 2 2;
proxy_ignore_headers Cache-Control;
proxy_cache_use_stale error timeout invalid_header http_502 http_503 http_504;
proxy_cache_key $scheme$host$request_uri$is_args$args;
proxy_cache_valid 30d;
proxy_cache_lock on;


{{range $host, $locations := $data.services}}
server {
  listen {{env "NGINX_LISTEN_PORT"}};
  server_name {{$host}};

  root /var/www-data/not-exists;

  set $proxy_cache_expires 'off';
  set $proxy_pass_cache_zone 'off';

  {{range $location, $routeStages := $locations}}

    {{$params := (index $routeStages 0).params}}

    {{$ssl := (index $routeStages 0).ssl}}
    {{if $ssl}}
      ssl on;
      listen {{env "NGINX_SSL_PORT"}} ssl;
      ssl_certificate '{{$ssl.cert}}';
      ssl_certificate_key '{{$ssl.key}}';
    {{end}}

    location {{$location}} {
      set $proxy_pass_host $host;
      set $proxy_pass_scheme $scheme;
      set $proxy_pass_upstream '';

      if ($http_x_forwarded_proto) {
        set $proxy_pass_scheme $http_x_forwarded_proto;
      }

      {{if $params.redirectHttps }}
      if ($proxy_pass_scheme = 'http') {
        return 301 https://$server_name$request_uri;
      }
      {{end}}

      {{range $i, $route := $routeStages}}
        {{if not (eq $route.routeValues "-")}}
        set $route_values '{{$route.routeKeys}}';
        if ($route_values = '{{$route.routeValues}}') {
        {{end}}
          {{if $route.staticHost -}}
            set $proxy_pass_host '{{$route.staticHost}}';
          {{end}}

          set $proxy_pass_upstream '{{$route.upstream}}';

        {{if not (eq $route.routeValues "-")}} } {{end}}
      {{end}}

      expires $proxy_cache_expires;

      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection $http_connection;
      proxy_set_header   X-Original-Host $host;
      proxy_set_header   X-Original-Scheme $scheme;
      proxy_set_header   X-Forwarded-For $http_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $proxy_pass_scheme;
      proxy_set_header   Accept-Encoding '';

      if ($proxy_pass_upstream = '') {
        return 404;
      }

      {{ $cache := (index $routeStages 0).cache }}

      {{if $cache}}
        # cached upstream
        proxy_cache 'upstream_cache';

        {{if $cache.key}}
          proxy_cache_key '{{$cache.key}}';
        {{end}}
        {{if $cache.valid}}
          proxy_cache_valid '{{$cache.valid}}';
        {{end}}
      {{else}}
        proxy_cache $proxy_pass_cache_zone;
      {{end}}

      proxy_set_header Host $proxy_pass_host;

      {{ (index $routeStages 0).extra }}

      {{ if $params.stripPrefix }}
        proxy_pass http://$proxy_pass_upstream/;
      {{ else }}
        proxy_pass http://$proxy_pass_upstream;
      {{ end }}
    }
  {{end}}

  location /-/ {
    set $proxy_cache_expires '30d';
    set $proxy_pass_cache_zone 'upstream_cache';
    rewrite ^/-/(?<url>.+) /$url;
  }
}
{{end}}
{{- end}}
