worker_processes 4;
pid /var/run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 1024;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout 65;

  types_hash_max_size 8192;
  server_names_hash_max_size 8192;
  server_names_hash_bucket_size 512;

  client_max_body_size 512m;
  proxy_read_timeout 120s;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  charset utf-8;

  log_format json escape=json
    '{ "timestamp": "$time_iso8601", '
      '"host": "$host", '
      '"remote_addr": "$remote_addr", '
      '"http_x_forwarded_for": "$http_x_forwarded_for", '
      '"status": "$status", '
      '"request_method": "$request_method", '
      '"uri": "$uri", '
      '"body_bytes_sent": "$body_bytes_sent", '
      '"request_time": "$request_time", '
      '"request_method": "$request_method", '
      '"http_referrer": "$http_referer", '
      '"http_user_agent": "$http_user_agent" }';

  access_log /dev/stdout json;
  error_log /dev/stderr warn;

  gzip on;
  gzip_disable "msie6";
  gzip_proxied any;
  gzip_comp_level 5;
  gzip_min_length 1000;
  gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript image/svg+xml text/xml application/xml application/xml+rss;

  geo $staging {
    default "live";
    127.0.0.0/8 "stage";
    10.0.0.0/8 "stage";
    172.16.0.0/12 "stage";
    192.168.0.0/16 "stage";
  }

  split_clients "app${remote_addr}${http_user_agent}" $canary {
    2.0% "2%";
    5.0% "5%";
    *    "no";
  }

  lua_shared_dict prometheus_metrics 32M;

  lua_package_path "/etc/nginx/prometheus.lua";

  init_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")

    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})

    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})

    metric_connections = prometheus:gauge(
      "nginx_http_connections", "Number of HTTP connections", {"state"})

    metric_last_activity = prometheus:gauge(
      "nginx_http_last_activity", "Time of last activity", {"host"})
  }

  log_by_lua_block {
    metric_requests:inc(1, {ngx.var.host, ngx.var.status})
    metric_latency:observe(ngx.now() - ngx.req.start_time(), {ngx.var.host})
    metric_last_activity:set(ngx.now(), {ngx.var.host})
  }

  server {
    listen 80 default_server;
    server_name  _;

    location / {
      return 404;
    }

    location /metrics {
      if ($staging != "stage") {
        return 404;
      }

      access_log off;

      content_by_lua_block {
        metric_connections:set(ngx.var.connections_reading, {"reading"})
        metric_connections:set(ngx.var.connections_waiting, {"waiting"})
        metric_connections:set(ngx.var.connections_writing, {"writing"})

        prometheus:collect()
      }
    }
  }

  include /etc/nginx/conf.d/*.conf;
}
